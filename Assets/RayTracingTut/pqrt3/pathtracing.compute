#pragma kernel CSMain

RWTexture2D<float4> Result;

float4x4 cameraToWorld;
float4x4 cameraInverseProjection;

float2 pixelOffset;

float3 skyboxColor;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

float2 pixel;
float seed;

struct InfraRedEmitter {
    float3 position;
    float wavelength;
    float3 direction;
};
float3 capturererPosition;

struct Sphere {
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

StructuredBuffer<Sphere> spheres;

struct MeshObject {
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
    float3 albedo;      // TODO : deze uit de material halen inplaats van indivudeel per object
    float3 specular;
    float smoothness; 
    float3 emission;

};

StructuredBuffer<MeshObject> meshObjects;
StructuredBuffer<float3> vertices;
StructuredBuffer<int> indices;
StructuredBuffer<InfraRedEmitter> infraRedEmitters;

/* *********************************************************************************************************************
 * Helper functions and constants
 ********************************************************************************************************************* */

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

float4 directionalLight;

float rand() {
    float result = frac(sin(seed / 100.0f * dot(pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    seed += 1.0f;
    return result;
}

/*
 * Avarages the color channels
 */
float energy(float3 color) {
    return dot(color, 1.0f / 3.0f);
}

float SmoothnessToPhongAlpha(float s) {
    return pow(1000.0f, s * s);
}

/*
 * returns the result of the dot product, with an optional factor and then clamped to [0,1]
 */
float sdot(float3 x, float3 y, float f = 1.0f) {
    return saturate(dot(x, y) * f);
}

/*
 * Transform the direction to be inline with the normal
 */
float3x3 GetTangentSpace(float3 normal) {
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

/*
 * Sample the half-sphere hemisphere around a intersection point 
*/
float3 SampleHemisphere(float3 normal, float alpha) {
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

/* *********************************************************************************************************************
 * Ray data structures
 ********************************************************************************************************************* */

struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    // Transform the camera origin to world space
    float3 origin = mul(cameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(cameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(cameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}


/* *********************************************************************************************************************
 * Intesection algorithms
 ********************************************************************************************************************* */

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = 0.5f;
        bestHit.specular = 0.03f;
        bestHit.smoothness = 0.2f;
        bestHit.emission = float3(0.0f, 0.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
    }
}

/* 
 * Intersect a ray with a triangle ( Fast, Minimum Storage Ray-Triangle Intersection | Tomas Akenine-MÃ¶ller and Ben Trumbore | 1997)
 */
bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v) {
    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, edge2);
    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);
    // use backface culling
    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;
    // calculate distance from vert0 to ray origin
    float3 tvec = ray.origin - vert0;
    // calculate U parameter and test bounds
    u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f)
        return false;
    // prepare to test V parameter
    float3 qvec = cross(tvec, edge1);
    // calculate V parameter and test bounds
    v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;
    // calculate t, ray intersects triangle
    t = dot(edge2, qvec) * inv_det;
    return true;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject) {
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3) {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(vertices[indices[i]], 1))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(vertices[indices[i + 1]], 1))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(vertices[indices[i + 2]], 1))).xyz;
        float t, u, v;
        if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v)) {
            if (t > 0 && t < bestHit.distance) {
                bestHit.distance = t;
                bestHit.position = ray.origin + t * ray.direction;
                bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
                // bestHit.albedo = 0.0f;
                // bestHit.specular = 0.65f;
                // bestHit.smoothness = 0.99f;
                // bestHit.emission = 0.0f;
                bestHit.albedo = meshObject.albedo;
                bestHit.specular = meshObject.specular;
                bestHit.smoothness = meshObject.smoothness;
                bestHit.emission = meshObject.emission;
            }
        }
    }
}

/* *********************************************************************************************************************
 * Ray tracing
  **********************************************************************************************************************/

RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    uint count, stride;

    // intersect met ground plane
    // IntersectGroundPlane(ray, bestHit);

    // Trace spheres
    // uint numSpheres;
    // spheres.GetDimensions(numSpheres, stride);
    // for (uint i = 0; i < numSpheres; i++)
    //     IntersectSphere(ray, bestHit, spheres[i]);

    // Add a floating unit sphere
    // IntersectSphere(ray, bestHit, float4(0, 3.0f, 0, 1.0f)); 

    // Trace single triangle
    // float3 v0 = float3(-150, 0, -150);
    // float3 v1 = float3(150, 0, -150);
    // float3 v2 = float3(0, 150 * sqrt(2), -150);
    // float t, u, v;
    // if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v)) {
    //     if (t > 0 && t < bestHit.distance)
    //     {
    //         bestHit.distance = t;
    //         bestHit.position = ray.origin + t * ray.direction;
    //         bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
    //         bestHit.albedo = 0.00f;
    //         bestHit.specular = 0.65f * float3(1, 0.4f, 0.2f);
    //         bestHit.smoothness = 0.9f;
    //         bestHit.emission = 0.0f;
    //     } 
    // } 

    // Trace mesh objects
    meshObjects.GetDimensions(count, stride);
    for (uint i = 0; i < count; i++)
    {
        IntersectMeshObject(ray, bestHit, meshObjects[i]);
    }

    return bestHit;
}

/* *********************************************************************************************************************
 * Shading
 ********************************************************************************************************************* */

float3 Shade(inout Ray ray, RayHit hit) {
    if (hit.distance < 1.#INF) {
        // Calculate chances of diffuse and specular reflection
        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);

        // float sum = specChance + diffChance;
        // specChance /= sum;
        // diffChance /= sum;
        // Roulette-select the ray's path

        float roulette = rand();
        if (roulette < specChance) {
            // Specular reflection
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
        } else if (roulette < specChance + diffChance && diffChance > 0) {
            // Diffuse reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * 2 * hit.albedo;
        } else {
            // Terminate ray
            ray.energy = 0.0f;
        }
        return hit.emission;
    } else {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;

        // Sample the skybox and write it 
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1;
        // return skyboxColor;
    }
}

// maps the depth values to a color TODO
float3 convertDistanceToColor(float distance) {
    if (distance == 1.#INF) {
        return float3(0, 0, 0);
    } //else if (distance < 1) {
    //     return float3(1, 0, 0);
    // } else if (distance < 10) {
    //     return float3(0, 1, 0);
    // } else if (distance < 15) {
    //     return float3(0, 0, 1);
    // } else if (distance < 25) {
    //     return float3(1, 1, 0);
    // } else if (distance < 40) {
    //     return float3(1, 0, 1);
    // } else if (distance < 55) {
    //     return float3(0, 1, 1);
    // } else {
    //     return float3(1, 1, 1);
    // }

    if (distance < 30) {
        return float3(distance / 80, distance / 80, 1);
    } else if (distance < 60) {
        return float3(distance / 60, 1, distance / 60);
    } else {
        return float3(1, distance / 100, distance / 100);
    }
}

/* *********************************************************************************************************************
 * depth tracing
 ********************************************************************************************************************* */
RayHit traceDepth(Ray ray) {
    // normal trace into the scene
    RayHit bestHit = CreateRayHit();
    uint count, stride;
    meshObjects.GetDimensions(count, stride);
    for (uint i = 0; i < count; i++) {
        IntersectMeshObject(ray, bestHit, meshObjects[i]);
    }

    // for this hit point, we need to calculate the depth from the emittor / capturer . ( the camera is just the view position, it had nothing do to with the depth calculation )

    // trace from the hitpoint to the emmiter
    float3 newDirection = infraRedEmitters[0].position - bestHit.position;  // the direction from the hitpoint to the emitter
    Ray newRay = CreateRay(bestHit.position, newDirection);
    RayHit newHit = CreateRayHit();
    for (uint i = 0; i < count; i++) {
        IntersectMeshObject(newRay, newHit, meshObjects[i]);
    }

    // calculate the distance between hitpoint and emittor
    float distance = length(bestHit.position - infraRedEmitters[0].position);
    distance = abs(distance);
    // bestHit.distance = distance;

    if (newHit.distance != 1.#INF) {
        bestHit.distance = 1.#INF;
    } else if (bestHit.distance != 1.#INF ) {
        bestHit.distance = distance;
    }

    // if the distance is the same as the distance in the newHit, there is no object between the hitpoint and the emittor
    if (distance == newHit.distance) {
        
    } else {
        // newHit.distance = 1.#INF;
    }

    // trace from the emmiter to the hitpoint
    // float3 newDirection = bestHit.position - infraRedEmitters[0].position;  // the direction from the emitter to the hitpoint
    // Ray newRay = CreateRay(infraRedEmitters[0].position, newDirection);
    // RayHit newHit = CreateRayHit();
    // for (uint i = 0; i < count; i++) {
    //     IntersectMeshObject(newRay, newHit, meshObjects[i]);
    // }

    // trace back into the infrared emitter
    // float3 newDirection = infraRedEmitters[0].position - bestHit.position;  // the direction from the hitpoint to the emitter
    // Ray reverseRay = CreateRay(bestHit.position, newDirection);
    // RayHit reverseHit = CreateRayHit();
    // for (uint i = 0; i < count; i++) {
    //     IntersectMeshObject(reverseRay, reverseHit, meshObjects[i]);
    // }

    // // if we hit an object in the reverse ray, the object is not illuminated by the emitter
    // if (reverseHit.distance < 1.#INF) {
    //     bestHit.distance = 1.#INF;
    // }

    return bestHit;
 }

/* *********************************************************************************************************************
 * Main kernel
 ********************************************************************************************************************* */

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    pixel = id.xy;
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + pixelOffset) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);


    // Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++) {
        RayHit hit = traceDepth(ray);
        // result += ray.energy * Shade(ray, hit);
        // if (!any(ray.energy))
        //     break; 
        if (hit.distance < 1.#INF) {
            result = convertDistanceToColor(hit.distance);
            break;
        }
    }

    Result[id.xy] = float4(result, 1);

}



/*
 * How I will have to implement depth tracing
 * intersect until an object is hit ( implemented )
 * calculate the distance from infrared emmiter to the object ( this is the direct distance ) , see that there isn't a object in between
 * then cast a reflected / scatterd / ... ray further into the scene and add that distance ( percent? ) ( this is the indirect distance)
 * Calculate per hit the change in the wave length of the light.
 * Secondary rays also have a wavelenght, this will have less of an impact on the final wavelength
 */